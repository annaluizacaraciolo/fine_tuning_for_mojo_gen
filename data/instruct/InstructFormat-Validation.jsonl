{
    "text": "<s>[INST] Asserts that the input value is True. If it is not then an\r\n    Error is raised.\r\n\r\n    Parameters:\r\n        T: A Boolable type.\r\n\r\n    Args:\r\n        val: The value to assert to be True.\r\n        msg: The message to be printed if the assertion fails.\r\n\r\n    Raises:\r\n        An Error with the provided message if assert fails and `None` otherwise.\r\n  [/INST]@always_inline\r\nfn assert_true[\r\n    T: Boolable\r\n](val: T, msg: String = \"condition was unexpectedly False\") raises:\r\n\r\n    if not val:\r\n        raise Error(\"AssertionError: \" + msg)</s>"
}
{
    "text": "<s>[INST] Asserts that the input value is False. If it is not then an Error is\r\n    raised.\r\n\r\n    Parameters:\r\n        T: A Boolable type.\r\n\r\n    Args:\r\n        val: The value to assert to be False.\r\n        msg: The message to be printed if the assertion fails.\r\n\r\n    Raises:\r\n        An Error with the provided message if assert fails and `None` otherwise.\r\n   [/INST]@always_inline\r\nfn assert_false[\r\n    T: Boolable\r\n](val: T, msg: String = \"condition was unexpectedly True\") raises:\r\n\r\n    if val:\r\n        raise Error(\"AssertionError: \" + msg)</s>"
}
{
    "text": "<s>[INST] Asserts that the input values are equal. If it is not then an Error\r\n    is raised.\r\n\r\n    Args:\r\n        lhs: The lhs of the equality.\r\n        rhs: The rhs of the equality.\r\n        msg: The message to be printed if the assertion fails.\r\n\r\n    Raises:\r\n        An Error with the provided message if assert fails and `None` otherwise.\r\n    [/INST]@always_inline\r\nfn assert_equal(lhs: Int, rhs: Int, msg: String = \"\") raises:\r\n\r\n    if lhs != rhs:\r\n        raise _assert_equal_error(str(lhs), str(rhs), msg=msg)</s>"
}
{
    "text": "<s>[INST]  Asserts that the input values are equal. If it is not then an Error\r\n    is raised.\r\n\r\n    Args:\r\n        lhs: The lhs of the equality.\r\n        rhs: The rhs of the equality.\r\n        msg: The message to be printed if the assertion fails.\r\n\r\n    Raises:\r\n        An Error with the provided message if assert fails and `None` otherwise.\r\n    [/INST]@always_inline\r\nfn assert_equal(lhs: String, rhs: String, msg: String = \"\") raises:\r\n\r\n    if lhs != rhs:\r\n        raise _assert_equal_error(lhs, rhs, msg=msg)</s>"
}
{
    "text": "<s>[INST] Asserts that the input values are equal. If it is not then an\r\n    Error is raised.\r\n\r\n    Parameters:\r\n        type: The dtype of the left- and right-hand-side SIMD vectors.\r\n        size: The width of the left- and right-hand-side SIMD vectors.\r\n\r\n    Args:\r\n        lhs: The lhs of the equality.\r\n        rhs: The rhs of the equality.\r\n        msg: The message to be printed if the assertion fails.\r\n\r\n    Raises:\r\n        An Error with the provided message if assert fails and `None` otherwise.\r\n[/INST]@always_inline\r\nfn assert_equal[\r\n    type: DType, size: Int\r\n](lhs: SIMD[type, size], rhs: SIMD[type, size], msg: String = \"\") raises:\r\n\r\n    if lhs != rhs:\r\n        raise _assert_equal_error(str(lhs), str(rhs), msg=msg)</s>"
}
{
    "text": "<s>[INST] Asserts that the input values are not equal. If it is not then an\r\n    Error is raised.\r\n\r\n    Args:\r\n        lhs: The lhs of the inequality.\r\n        rhs: The rhs of the inequality.\r\n        msg: The message to be printed if the assertion fails.\r\n\r\n    Raises:\r\n        An Error with the provided message if assert fails and `None` otherwise.\r\n    [/INST]@always_inline\r\nfn assert_not_equal(lhs: Int, rhs: Int, msg: String = \"\") raises:\r\n\r\n    if lhs == rhs:\r\n        raise _assert_not_equal_error(str(lhs), str(rhs), msg=msg)</s>"
}
{
    "text": "<s>[INST] Asserts that the input values are not equal. If it is not then an\r\n    an Error is raised.\r\n\r\n    Args:\r\n        lhs: The lhs of the inequality.\r\n        rhs: The rhs of the inequality.\r\n        msg: The message to be printed if the assertion fails.\r\n\r\n    Raises:\r\n        An Error with the provided message if assert fails and `None` otherwise.\r\n    [/INST]@always_inline\r\nfn assert_not_equal(lhs: String, rhs: String, msg: String = \"\") raises:\r\n\r\n    if lhs == rhs:\r\n        raise _assert_not_equal_error(str(lhs), str(rhs), msg=msg)</s>"
}
{
    "text": "<s>[INST] Asserts that the input values are not equal. If it is not then an\r\n    Error is raised.\r\n\r\n    Parameters:\r\n        type: The dtype of the left- and right-hand-side SIMD vectors.\r\n        size: The width of the left- and right-hand-side SIMD vectors.\r\n\r\n    Args:\r\n        lhs: The lhs of the inequality.\r\n        rhs: The rhs of the inequality.\r\n        msg: The message to be printed if the assertion fails.\r\n\r\n    Raises:\r\n        An Error with the provided message if assert fails and `None` otherwise.\r\n    [/INST]@always_inline\r\nfn assert_not_equal[\r\n    type: DType, size: Int\r\n](lhs: SIMD[type, size], rhs: SIMD[type, size], msg: String = \"\") raises:\r\n\r\n    if lhs == rhs:\r\n        raise _assert_not_equal_error(str(lhs), str(rhs), msg=msg)</s>"
}
{
    "text": "<s>[INST] Asserts that the input values are equal up to a tolerance. If it is\r\n    not then an Error is raised.\r\n\r\n    Parameters:\r\n        type: The dtype of the left- and right-hand-side SIMD vectors.\r\n        size: The width of the left- and right-hand-side SIMD vectors.\r\n\r\n    Args:\r\n        lhs: The lhs of the equality.\r\n        rhs: The rhs of the equality.\r\n        msg: The message to print.\r\n        atol: The _absolute tolerance.\r\n        rtol: The relative tolerance.\r\n\r\n    Raises:\r\n        An Error with the provided message if assert fails and `None` otherwise.\r\n    [/INST]@always_inline\nfn assert_almost_equal[\n    type: DType, size: Int\n](\n    lhs: SIMD[type, size],\n    rhs: SIMD[type, size],\n    /,\n    *,\n    msg: String = \"\",\n    atol: Scalar[type] = 1e-08,\n    rtol: Scalar[type] = 1e-05,\n) raises:\n\n    var almost_equal = _isclose(lhs, rhs, atol=atol, rtol=rtol)\n    if not almost_equal:\n        var err = \"AssertionError: \" + str(lhs) + \" is not close to \" + str(\n            rhs\n        ) + \" with a diff of \" + _abs(lhs - rhs)\n        if msg:\n            err += \" (\" + msg + \")\"\n        raise err\n</s>"
}
{
    "text": "<s>[INST] Construct a context manager matching specific errors.\r\n\r\n        Args:\r\n            contains: The test will only pass if the error message\r\n                includes the literal text passed.\r\n        [/INST]    fn __init__(inout self, *, contains: String):\n\n        self.message_contains = contains</s>"
}
{
    "text": "<s>[INST] Exit the context manager with no error.\r\n\r\n        Raises:\r\n            AssertionError: Always. The block must raise to pass the test.\r\n        [/INST]    fn __exit__(self) raises:\r\n\r\n        raise Error(\"AssertionError: Didn't raise\")\r\n</s>"
}
{
    "text": "<s>[INST] Return true if the named value is defined.\r\n\r\n    Parameters:\r\n        name: The name to test.\r\n\r\n    Returns:\r\n        True if the name is defined.\r\n    [/INST]fn is_defined[name: StringLiteral]() -> Bool:\r\n\r\n    alias result = __mlir_attr[\r\n        `#kgen.param.expr<get_env, `, name.value, `> : i1`\r\n    ]\r\n    return result</s>"
}
{
    "text": "<s>[INST] Try to get an integer-valued define. If the name is not defined, return\r\n    a default value instead.\r\n\r\n    Parameters:\r\n        name: The name of the define.\r\n        default: The default value to use.\r\n\r\n    Returns:\r\n        An integer parameter value.\r\n    [/INST]fn env_get_int[name: StringLiteral, default: Int]() -> Int:\n\n\n    @parameter\n    if is_defined[name]():\n        return env_get_int[name]()\n    else:\n        return default</s>"
}
{
    "text": "<s>[INST] Applies a given element binary function to each pair of corresponding\r\n    elements in two tuples.\r\n\r\n    Example Usage:\r\n        var a: StaticTuple[Int, size]\r\n        var b: StaticTuple[Int, size]\r\n        var c = _int_tuple_binary_apply[size, Int.add](a, b)\r\n\r\n    Parameters:\r\n        size: Static size of the operand and result tuples.\r\n        binary_fn: Binary function to apply to tuple elements.\r\n\r\n    Args:\r\n        a: Tuple containing lhs operands of the elementwise binary function.\r\n        b: Tuple containing rhs operands of the elementwise binary function.\r\n\r\n    Returns:\r\n        Tuple containing the result.\r\n [/INST]@always_inline\r\nfn _int_tuple_binary_apply[\r\n    size: Int,\r\n    binary_fn: fn (Int, Int) -> Int,\r\n](a: StaticTuple[Int, size], b: StaticTuple[Int, size]) -> StaticTuple[\r\n    Int, size\r\n]:\r\n\r\n\r\n    var c = StaticTuple[Int, size]()\r\n\r\n    @always_inline\r\n    @parameter\r\n    fn do_apply[idx: Int]():\r\n        var a_elem: Int = a.__getitem__[idx]()\r\n        var b_elem: Int = b.__getitem__[idx]()\r\n        c.__setitem__[idx](binary_fn(a_elem, b_elem))\r\n\r\n    unroll[do_apply, size]()\r\n\r\n    return c</s>"
}
{
    "text": "<s>[INST] Reduces the tuple argument with the given reduce function and initial\r\n    value.\r\n\r\n    Example Usage:\r\n        var a: StaticTuple[mlir_bool, size]\r\n        var c = _bool_tuple_reduce[size, _reduce_and_fn](a, True)\r\n\r\n    Parameters:\r\n        size: Static size of the operand and result tuples.\r\n        reduce_fn: Reduce function to accumulate tuple elements.\r\n\r\n    Args:\r\n        a: Tuple containing elements to reduce.\r\n        init: Value to initialize the reduction with.\r\n\r\n    Returns:\r\n        The result of the reduction.\r\n    [/INST]@always_inline\r\nfn _bool_tuple_reduce[\r\n    size: Int,\r\n    reduce_fn: fn (Bool, Bool) -> Bool,\r\n](a: StaticTuple[mlir_bool, size], init: Bool) -> Bool:\r\n\r\n\r\n    var c: Bool = init\r\n\r\n    @always_inline\r\n    @parameter\r\n    fn do_reduce[idx: Int]():\r\n        c = reduce_fn(c, a.__getitem__[idx]())\r\n\r\n    unroll[do_reduce, size]()\r\n\r\n    return c</s>"
}
{
    "text": "<s>[INST] Write a base struct that implements size agnostic index functions. It constructs a static int tuple of the given size.[/INST]@value\n@register_passable(\"trivial\")\nstruct StaticIntTuple[size: Int](Sized, Stringable, EqualityComparable):\n\n\n    var data: StaticTuple[Int, size]\n\n    @always_inline\n    fn __init__() -> Self:\n\n        return 0</s>"
}
{
    "text": "<s>[INST] Constructs a sized 1 static int tuple of given the element value.\r\n\r\n        Args:\r\n            value: The initial value.\r\n\r\n        Returns:\r\n            The constructed tuple.\r\n        [/INST]    @always_inline\r\n    fn __init__(value: __mlir_type.index) -> Self:\r\n\r\n        constrained[size == 1]()\r\n        return Int(value)</s>"
}
{
    "text": "<s>[INST] Constructs a static int tuple given a tuple of integers.\r\n\r\n        Args:\r\n            elems: The tuple to copy from.\r\n\r\n        Returns:\r\n            The constructed tuple.\r\n        [/INST]    @always_inline\r\n    fn __init__(elems: Tuple[Int, Int]) -> Self:\r\n \r\n\r\n        var num_elements = len(elems)\r\n\r\n        debug_assert(\r\n            size == num_elements,\r\n            \"[StaticIntTuple] mismatch in the number of elements\",\r\n        )\r\n\r\n        var tup = Self()\r\n\r\n        @parameter\r\n        fn fill[idx: Int]():\r\n            tup[idx] = elems.get[idx, Int]()\r\n\r\n        unroll[fill, 2]()\r\n\r\n        return tup</s>"
}
{
    "text": "<s>[INST] Constructs a static int tuple given a set of arguments.\r\n\r\n        Args:\r\n            elems: The elements to construct the tuple.\r\n\r\n        Returns:\r\n            The constructed tuple.\r\n        \n[/INST]    @always_inline\r\n    fn __init__(*elems: Int) -> Self:\r\n        var num_elements = len(elems)\r\n\r\n        debug_assert(\r\n            size == num_elements,\r\n            \"[StaticIntTuple] mismatch in the number of elements\",\r\n        )\r\n\r\n        var tup = Self()\r\n\r\n        @unroll\r\n        for idx in range(size):\r\n            tup[idx] = elems[idx]\r\n\r\n        return tup</s>"
}
{
    "text": "<s>[INST] Create and return a tuple constant using the specified values.\n[/INST]    @always_inline\n    fn __init__(values: VariadicList[Int]) -> Self:\n\n        constrained[size > 0]()\n        return Self {data: values}\n\n</s>"
}
{
    "text": "<s>[INST] Write a function that returns the size of the tuple.[/INST]    @always_inline(\"nodebug\")\n    fn __len__(self) -> Int:\n        return size</s>"
}
{
    "text": "<s>[INST] Bitcasts the floating-point value to an integer.\r\n\r\n    Parameters:\r\n        type: The floating-point type.\r\n\r\n    Args:\r\n        value: The value to bitcast.\r\n\r\n    Returns:\r\n        An integer representation of the floating-point value.\r\n    [/INST]@always_inline\r\nfn _fp_bitcast_to_integer[type: DType](value: Scalar[type]) -> Int:\r\n\r\n    alias integer_type = _integral_type_of[type]()\r\n    return int(bitcast[integer_type, 1](value))</s>"
}
{
    "text": "<s>[INST]  Returns the exponent and mantissa mask of a floating point type. It is\r\n        computed by `exponent_mask + mantissa_mask`.\r\n\r\n        Returns:\r\n            The exponent and mantissa mask.\r\n[/INST]    @staticmethod\r\n    @always_inline\r\n    fn exponent_mantissa_mask() -> Int:\r\n\r\n        constrained[\r\n            type.is_floating_point(),\r\n            \"dtype must be a floating point type\",\r\n        ]()\r\n        return Self.exponent_mask() + Self.mantissa_mask()</s>"
}
{
    "text": "<s>[INST] Bitcasts the floating-point value to an integer.\r\n\r\n        Args:\r\n            value: The floating-point type.\r\n\r\n        Returns:\r\n            An integer representation of the floating-point value.\r\n        [/INST]    @staticmethod\r\n    @always_inline\r\n    fn bitcast_to_integer(value: Scalar[type]) -> Int:\r\n\r\n        return _fp_bitcast_to_integer[type](value)</s>"
}
{
    "text": "<s>[INST] Bitcasts the floating-point value from an integer.\r\n\r\n        Args:\r\n            value: The int value.\r\n\r\n        Returns:\r\n            An floating-point representation of the Int.\r\n[/INST]    @staticmethod\r\n    @always_inline\r\n    fn bitcast_from_integer(value: Int) -> Scalar[type]:\r\n\r\n        return _fp_bitcast_from_integer[type](value)</s>"
}
{
    "text": "<s>[INST] Returns the sign of the floating point value. True if the sign is set\r\n        and False otherwise.\r\n\r\n        Args:\r\n            value: The floating-point type.\r\n\r\n        Returns:\r\n            Returns True if the sign is set and False otherwise.\r\n        [/INST]    @staticmethod\r\n    @always_inline\r\n    fn get_sign(value: Scalar[type]) -> Bool:\r\n\r\n\r\n        return (Self.bitcast_to_integer(value) & Self.sign_mask()) != 0</s>"
}
{
    "text": "<s>[INST] Returns the exponent bits of the floating-point value.\r\n\r\n        Args:\r\n            value: The floating-point value.\r\n\r\n        Returns:\r\n            Returns the exponent bits.\r\n        [/INST]    @staticmethod\r\n    @always_inline\r\n    fn get_exponent(value: Scalar[type]) -> Int:\r\n \r\n        return (\r\n            Self.bitcast_to_integer(value) & Self.exponent_mask()\r\n        ) >> Self.mantissa_width()</s>"
}
{
    "text": "<s>[INST] Create a pointer with the input value.\r\n\r\n        Args:\r\n            value: The input pointer to construct with.\r\n\r\n        Returns:\r\n            A null pointer.\r\n        [/INST]@always_inline\r\n    fn __init__(value: Self.pointer_type) -> Self:\r\n      \r\n        return Self {value: value}</s>"
}
{
    "text": "<s>[INST] Allocate an array with default alignment.\r\n\r\n        Args:\r\n            count: The number of elements in the array.\r\n\r\n        Returns:\r\n            The pointer to the newly allocated array.\r\n    [/INST]    @staticmethod\r\n    @always_inline\r\n    fn alloc(count: Int) -> Self:\r\n\r\n        return Self.__from_index(\r\n            int(_malloc[Int8](sizeof[T]() * count, alignment=alignof[T]()))\r\n        )</s>"
}
{
    "text": "<s>[INST] Gets the address of the argument.\n\n        Args:\n            arg: The value to get the address of.\n\n        Returns:\n            An AnyPointer which contains the address of the argument.\n        [/INST]    @staticmethod\r\n    @always_inline(\"nodebug\")\r\n    fn address_of(inout arg: T) -> Self:\r\n\r\n        return __mlir_op.`pop.pointer.bitcast`[_type = Self.pointer_type](\r\n            __get_lvalue_as_address(arg)\r\n        )</s>"
}
{
    "text": "<s>[INST] Free the memory referenced by the pointer.[/INST]    @always_inline\r\n    fn free(self):\r\n        \r\n        Pointer[Int8].__from_index(int(self)).free()</s>"
}
{
    "text": "<s>[INST] Move the value at the pointer out.\r\n\r\n        The pointer must not be null, and the pointer memory location is assumed\r\n        to contain a valid initialized instance of `T`.\r\n\r\n        This performs a _consuming_ move, ending the lifetime of the value stored\r\n        in this pointer memory location. Subsequent reads of this pointer are\r\n        not valid. If a new valid value is stored using `emplace_value()`, then\r\n        reading from this pointer becomes valid again.\r\n\r\n        Returns:\r\n            The value at the pointer.\r\n        [/INST]    @always_inline\r\n    fn take_value(self) -> T:\r\n\r\n        return __get_address_as_owned_value(self.value)</s>"
}
{
    "text": "<s>[INST] Emplace a new value into the pointer location.\r\n\r\n        The pointer memory location is assumed to contain uninitialized data,\r\n        and consequently the current contents of this pointer are not destructed\r\n        before writing `value`. Similarly, ownership of `value` is logically\r\n        transfered into the pointer location.\r\n\r\n        Args:\r\n            value: The value to emplace.\r\n    [/INST]    @always_inline\n    fn emplace_value(self, owned value: T):\n\n        __get_address_as_uninit_lvalue(self.value) = value ^</s>"
}
{
    "text": "<s>[INST] Moves the value contained in this pointer into the memory location\r\n        pointed to by `dest`.\r\n\r\n        This performs a consuming move (using `__moveinit__()`) out of the\r\n        memory location pointed to by this pointer. Subsequent reads of this\r\n        pointer are not valid unless and until a new, valid value has been\r\n        moved into this pointer's memory location using `emplace_value()`.\r\n\r\n        This transfers the value out of `self` and into `dest` using at most one\r\n        `__moveinit__()` call.\r\n\r\n        Safety:\r\n            * `self` must not be null\r\n            * `self` must contain a valid, initialized instance of `T`\r\n            * `dest` must not be null\r\n            * The contents of `dest` should be uninitialized. If `dest` was\r\n              previously written with a valid value, that value will be be\r\n              overwritten and its destructor will NOT be run.\r\n\r\n        Args:\r\n            dest: Destination pointer that the value will be moved into.\r\n        [/INST]    @always_inline\n    fn move_into(self, dest: AnyPointer[T]):\n\n        __get_address_as_uninit_lvalue(\n            dest.value\n        ) = __get_address_as_owned_value(self.value)\n</s>"
}
{
    "text": "<s>[INST] Returns the pointer address as an integer.\r\n\r\n        Returns:\r\n          The address of the pointer as an Int.\r\n        [/INST]    @always_inline\r\n    fn __int__(self) -> Int:\r\n\r\n        return __mlir_op.`pop.pointer_to_index`[\r\n            _type = __mlir_type.`!pop.scalar<index>`\r\n        ](self.value)</s>"
}
{
    "text": "<s>[INST] Return true if the pointer is non-null.\r\n\r\n        Returns:\r\n            Whether the pointer is null.\r\n        [/INST]    @always_inline\r\n    fn __bool__(self) -> Bool:\r\n\r\n        return int(self) != 0</s>"
}
{
    "text": "<s>[INST] Return a pointer at an offset from the current one.\r\n\r\n        Args:\r\n            offset: The offset index.\r\n\r\n        Returns:\r\n            An offset pointer.\r\n        [/INST]    @always_inline\r\n    fn __add__(self, offset: Int) -> Self:\r\n\r\n        return Self.__from_index(int(self) + offset * sizeof[T]())</s>"
}
{
    "text": "<s>[INST] Return a pointer at an offset from the current one.\r\n\r\n        Args:\r\n            offset: The offset index.\r\n\r\n        Returns:\r\n            An offset pointer.\r\n        [/INST]    @always_inline\r\n    fn __sub__(self, offset: Int) -> Self:\r\n\r\n        return self + (-offset)</s>"
}
{
    "text": "<s>[INST] Returns True if the two pointers are equal.\r\n\r\n        Args:\r\n            rhs: The value of the other pointer.\r\n\r\n        Returns:\r\n            True if the two pointers are equal and False otherwise.\r\n        [/INST]    @always_inline(\"nodebug\")\r\n    fn __eq__(self, rhs: Self) -> Bool:\r\n\r\n        return int(self) == int(rhs)</s>"
}
{
    "text": "<s>[INST] Returns True if the two pointers are not equal.\r\n\r\n        Args:\r\n            rhs: The value of the other pointer.\r\n\r\n        Returns:\r\n            True if the two pointers are not equal and False otherwise.\r\n        [/INST]    @always_inline(\"nodebug\")\r\n    fn __ne__(self, rhs: Self) -> Bool:\r\n\r\n        return not (self == rhs)</s>"
}
