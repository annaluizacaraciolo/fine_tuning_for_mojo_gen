[
    {
        "user_input": "Write a function to iterate over a collection and perform an operation on each element",
        "system_answer": "@always_inline\n    fn each_idx[\n        func: fn[idx: Int, T: element_trait] (T) capturing -> None\n    ](self): @parameter\n        fn unrolled[i: Int]():\n            func[i, element_types[i.value]](self.get_element[i]()[])\n\n        unroll[unrolled, Self.__len__()]()"
    },
    {
        "user_input": "Write a function to normalize a vector into a unit vector.",
        "system_answer": "@always_inline\n    fn normalize(self) -> Vec3f:\n        return self.data * rsqrt(self @ self))"
    },
    {
        "user_input": "Write a struct for Pet with a constructor containing parameters for name and age.",
        "system_answer": "struct MyPet:\r\n    var name: String\r\n    var age: Int\r\n\r\n    fn __init__(inout self, owned name: String, age: Int):\r\n        self.name = name^\r\n        self.age = age"
    },
    {
        "user_input": "Write a function that returns the greatest between two integers.",
        "system_answer": "@always_inline\r\nfn _max(a: Int, b: Int) -> Int:\r\n    return a if a > b else b"
    },
    {
        "user_input": "Write a function for a vectorized implementation of the inner mandelbrot computation.",
        "system_answer": "fn mandelbrot_kernel_SIMD[\n    simd_width: Int\n](c: ComplexSIMD[float_type, simd_width]) -> SIMD[int_type, simd_width]:\n   \n    var cx = c.re\n    var cy = c.im\n    var x = SIMD[float_type, simd_width](0)\n    var y = SIMD[float_type, simd_width](0)\n    var y2 = SIMD[float_type, simd_width](0)\n    var iters = SIMD[int_type, simd_width](0)\n\n    var t: SIMD[DType.bool, simd_width] = True\n    for i in range(MAX_ITERS):\n        if not t.reduce_or():\n            break\n        y2 = y * y\n        y = x.fma(y + y, cy)\n        t = x.fma(x, y2) <= 4\n        x = x.fma(x, cx - y2)\n        iters = t.select(iters + 1, iters)\n    return iters"
    },
    {
        "user_input": "Write a function two create an image of a sphere using ray tracing.",
        "system_answer": "from math import tan, acos\r\nfrom algorithm import parallelize\r\n\r\n\r\nfn create_image_with_sphere(sphere: Sphere, height: Int, width: Int) -> Image:\r\n    var image = Image(height, width)\r\n\r\n    @parameter\r\n    fn _process_row(row: Int):\r\n        var y = -((2.0 * row + 1) / height - 1)\r\n        for col in range(width):\r\n            var x = ((2.0 * col + 1) / width - 1) * width / height\r\n            var dir = Vec3f(x, y, -1).normalize()\r\n            image.set(row, col, cast_ray(Vec3f.zero(), dir, sphere))\r\n\r\n    parallelize[_process_row](height)\r\n\r\n    return image"
    }
]